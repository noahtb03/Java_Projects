import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Noah Bennett
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "";
        String link = "";
        String desc = "";

        if (channel.child(getChildElement(channel, "title")).child(0)
                .label() != "") {
            title = channel.child(getChildElement(channel, "title")).child(0)
                    .label();
        }

        if (channel.child(getChildElement(channel, "link")).child(0)
                .label() != "") {
            link = channel.child(getChildElement(channel, "link")).child(0)
                    .label();
        }

        if (channel.child(getChildElement(channel, "description")).child(0)
                .label() != "") {
            desc = channel.child(getChildElement(channel, "description"))
                    .child(0).label();
        }
        out.println("<html>\n<head>\n<title>" + title
                + "</title>\n</head>\n<body>\n <h1><a href=\"" + link + "\">"
                + title + "</a></h1>\n <p>" + desc
                + " </p>\n <table border=\"1\">\n"
                + "  <tr>\n   <th>Date</th>\n   <th>Source</th>\n   <th>News</th>\n  </tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>\n</body>\n</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int numChildren = xml.numberOfChildren();
        int location = -1;
        int i = 0;

        while (i < numChildren) {
            if (xml.child(i).label().equals(tag)) {
                location = i;
                return location;
            }
            i++;
        }

        return location;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String pubDate = "";
        String source = "";
        String news = "";

        if (item.child(getChildElement(item, "pubDate")).child(0)
                .label() != "") {
            pubDate = item.child(getChildElement(item, "pubDate")).child(0)
                    .label();
        }

        if (item.child(getChildElement(item, "source")).child(0)
                .label() != "") {
            source = item.child(getChildElement(item, "source")).child(0)
                    .label();
        }

        if (item.child(getChildElement(item, "title")).child(0).label() != "") {
            news = item.child(getChildElement(item, "title")).child(0).label();
        }

        out.println("  <tr>\n   <td>" + pubDate + "</td>");
        out.println(
                "   <td><a href=\""
                        + item.child(getChildElement(item, "source"))
                                .attributeValue("url")
                        + "\">" + source + "</a></td>");
        out.println("   <td><a href=\""
                + item.child(getChildElement(item, "link")).child(0).label()
                + "\">" + news + "</a></td>\n  </tr>");

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Enter RSS 2.0 URL: ");

        XMLTree rss = new XMLTree1(in.nextLine());
        XMLTree channel = rss.child(0);

        int i = getChildElement(channel, "item");

        out.println("Enter a file name: ");
        String fileName = in.nextLine();

        SimpleWriter out1 = new SimpleWriter1L(fileName + ".html");

        if (rss.label().equals("rss") && rss.hasAttribute("version")
                && rss.attributeValue("version").equals("2.0")) {
            outputHeader(channel, out1);

            while (i < channel.numberOfChildren()) {
                processItem(channel.child(i), out1);
                i++;
            }
            outputFooter(out1);
        }

        in.close();
        out.close();
        out1.close();
    }

}
